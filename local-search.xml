<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Socket_C</title>
    <link href="/2024/08/29/Socket-C/"/>
    <url>/2024/08/29/Socket-C/</url>
    
    <content type="html"><![CDATA[<h1 id="Socket基础"><a href="#Socket基础" class="headerlink" title="Socket基础"></a>Socket基础</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>​socket(套接字)是一种进程间通信机制，上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。‌<strong>套接指的是套接管，就是将两根水管套接起来的管子，然后“字”是此连接的数据标识，即一个WORD，所以套接字就是一个标识连接的数据体。</strong><br>    对于协议栈都是集成在操作系统里，我们关心的是我们的应用程序的数据能不能正常的发送出去和接收服务端发回来的数据。这就需要一个桥梁，一端连接操作系统的协议栈，一端连接用户的应用数据。socket就是这个桥梁。套接字有三种类型：流式套接字（SOCK_STREAM，基于TCP）、数据报套接字（SOCK_DGRAM，基于UDP）和原始套接字（SOCK_RAW）。</p><p><strong>三要素</strong>：协议 TCP&#x2F;UDP、ip地址、端口号</p><p>利用 协议+IP地址+端口号 就可以标识网络中的进程了，进程间的通信就可以利用这个标识与其它进程进行交互。</p><h2 id="二、基本步骤"><a href="#二、基本步骤" class="headerlink" title="二、基本步骤"></a>二、基本步骤</h2><h3 id="TCP开发流程"><a href="#TCP开发流程" class="headerlink" title="TCP开发流程"></a>TCP开发流程</h3><p><img src="/img/sockettcp.png" alt="TCP"></p><h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span> serverSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//创建套接字</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddress; <br>serverAddress.sin_family = AF_INET;<br>serverAddress.sin_port = <span class="hljs-built_in">htons</span>(port); <br>serverAddress.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY); <br><span class="hljs-built_in">bind</span>(serverSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress, <span class="hljs-built_in">sizeof</span>(serverAddress));<span class="hljs-comment">//绑定地址</span><br><br><span class="hljs-built_in">listen</span>(serverSocket, backlog); <span class="hljs-comment">//监听连接</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> clientAddress; <br><span class="hljs-type">int</span> clientSocket = <span class="hljs-built_in">accept</span>(serverSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;clientAddress,<span class="hljs-built_in">sizeof</span>(clientAddress)); <span class="hljs-comment">//接受连接</span><br><br><span class="hljs-built_in">send</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>); <span class="hljs-comment">//发送数据</span><br><span class="hljs-built_in">recv</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>); <span class="hljs-comment">//接收数据</span><br><br><span class="hljs-built_in">close</span>(clientSocket); <br><span class="hljs-built_in">close</span>(serverSocket); <span class="hljs-comment">//关闭连接</span><br></code></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span> clientSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//创建套接字</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddress; <br>serverAddress.sin_family = AF_INET; <br>serverAddress.sin_port = <span class="hljs-built_in">htons</span>(port); <br>serverAddress.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(serverIP); <br><span class="hljs-built_in">connect</span>(clientSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress, <span class="hljs-built_in">sizeof</span>(serverAddress)); <span class="hljs-comment">//连接服务器</span><br><br><span class="hljs-built_in">send</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>); <span class="hljs-comment">//发送数据</span><br><span class="hljs-built_in">recv</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>); <span class="hljs-comment">//接收数据</span><br><br><span class="hljs-built_in">close</span>(clientSocket); <span class="hljs-comment">//关闭连接</span><br></code></pre></td></tr></table></figure><h3 id="UDP开发流程"><a href="#UDP开发流程" class="headerlink" title="UDP开发流程"></a>UDP开发流程</h3><p><img src="/img/socketupd.png" alt="UDP"></p><h4 id="服务器端-1"><a href="#服务器端-1" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span> serverSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//创建套接字</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddress; <br>serverAddress.sin_family = AF_INET; <br>serverAddress.sin_port = <span class="hljs-built_in">htons</span>(port); <br>serverAddress.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY); <br><span class="hljs-built_in">bind</span>(serverSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress, <span class="hljs-built_in">sizeof</span>(serverAddress)); <span class="hljs-comment">//绑定地址</span><br><br><span class="hljs-comment">//接收数据</span><br><span class="hljs-built_in">recvfrom</span>(serverSocket, buffer, size, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;clientAddress,<span class="hljs-built_in">sizeof</span>(clientAddress)); <br><br><span class="hljs-comment">//发送数据</span><br><span class="hljs-built_in">sendto</span>(serverSocket, buffer, size, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;clientAddress, <span class="hljs-built_in">sizeof</span>(clientAddress));<br><br><span class="hljs-built_in">close</span>(serverSocket); <span class="hljs-comment">//关闭套接字</span><br></code></pre></td></tr></table></figure><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span> clientSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//创建套接字</span><br><br><span class="hljs-comment">//发送数据</span><br><span class="hljs-built_in">sendto</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress, <span class="hljs-built_in">sizeof</span>(serverAddress)); <br><br><span class="hljs-comment">//接收数据</span><br><span class="hljs-built_in">recvfrom</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress,<span class="hljs-built_in">sizeof</span>(serverAddress));<br><br><span class="hljs-built_in">close</span>(clientSocket); <span class="hljs-comment">//关闭套接字</span><br></code></pre></td></tr></table></figure><h5 id="常用函数的原型和参数用法详解："><a href="#常用函数的原型和参数用法详解：" class="headerlink" title="常用函数的原型和参数用法详解："></a>常用函数的原型和参数用法详解：</h5><p>socket()函数：<br>原型：int socket(int domain, int type, int protocol);<br>参数：<br>domain：地址族，通常为AF_INET（IPv4）或AF_INET6（IPv6）。<br>type：套接字类型，可以是SOCK_STREAM（TCP）或SOCK_DGRAM（UDP）。<br>protocol：协议，通常为0，表示自动选择合适的协议。</p><p> bind()函数：</p><p>原型：int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);<br>参数：<br>sockfd：套接字描述符。<br>addr：指向本地地址结构体的指针。<br>addrlen：地址结构体的长度。</p><p>listen()函数：</p><p>原型：int listen(int sockfd, int backlog);<br>参数：<br>sockfd：套接字描述符。<br>backlog：待连接队列的最大长度。</p><p>accept()函数：</p><p>原型：int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);<br>参数：<br>sockfd：套接字描述符。<br>addr：指向客户端地址结构体的指针，用于存储客户端的地址信息。<br>addrlen：指向地址结构体长度的指针。</p><p>connect()函数：</p><p>原型：int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);<br>参数：<br>sockfd：套接字描述符。<br>addr：指向目标地址结构体的指针。<br>addrlen：地址结构体的长度。</p><p>send()函数：</p><p>原型：ssize_t send(int sockfd, const void *buf, size_t len, int flags);<br>参数：<br>sockfd：套接字描述符。<br>buf：指向要发送数据的缓冲区的指针。<br>len：要发送的数据的长度。<br>flags：发送标志，通常为0。</p><p>recv()函数：</p><p>原型：ssize_t recv(int sockfd, void *buf, size_t len, int flags);<br>参数：<br>sockfd：套接字描述符。<br>buf：指向接收数据的缓冲区的指针。<br>len：要接收的数据的最大长度。<br>flags：接收标志，通常为0。</p><p>sendto()函数：</p><p>原型：ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen);<br>参数：<br>sockfd：套接字描述符。<br>buf：指向要发送数据的缓冲区的指针。<br>len：要发送的数据的长度。<br>flags：发送标志，通常为0。<br>dest_addr：指向目标地址结构体的指针。<br>addrlen：目标地址结构体的长度。</p><p>recvfrom()函数：</p><p>原型：ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);<br>参数：<br>sockfd：套接字描述符。<br>buf：指向接收数据的缓冲区的指针。<br>len：要接收的数据的最大长度。<br>flags：接收标志，通常为0。<br>src_addr：指向源地址结构体的指针，用于存储源地址信息。<br>addrlen：指向地址结构体长度的指针。</p><p>close()函数：<br>原型：int close(int sockfd);</p><p>参数：套接字描述符。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h3><h4 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/socket.h&gt;</span><br><span class="hljs-comment">#include &lt;arpa/inet.h&gt;</span><br><br><span class="hljs-comment">#define SERVER_IP &quot;127.0.0.1&quot;</span><br><span class="hljs-comment">#define SERVER_PORT 8080</span><br><span class="hljs-comment">#define BUFFER_SIZE 1024</span><br><br>int main() &#123;<br>    int serverSocket, clientSocket;<br>    struct sockaddr_in serverAddr, clientAddr;<br>    socklen_t clientAddrLen;<br>    char buffer[BUFFER_SIZE];<br><br>    <span class="hljs-regexp">//</span> 创建服务端套接字<br>    serverSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (serverSocket == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create socket&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 设置服务器地址信息<br>    memset(&amp;serverAddr, <span class="hljs-number">0</span>, sizeof(serverAddr));<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = htons(SERVER_PORT);<br>    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);<br><br>    <span class="hljs-regexp">//</span> 绑定套接字到指定地址和端口<br>    <span class="hljs-keyword">if</span> (bind(serverSocket, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr)) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to bind socket&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 监听连接请求<br>    <span class="hljs-keyword">if</span> (listen(serverSocket, <span class="hljs-number">5</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to listen&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Server listening on port %d...\n&quot;</span>, SERVER_PORT);<br><br>    <span class="hljs-regexp">//</span> 接受客户端连接<br>    clientAddrLen = sizeof(clientAddr);<br>    clientSocket = accept(serverSocket, (struct sockaddr *)&amp;clientAddr, &amp;clientAddrLen);<br>    <span class="hljs-keyword">if</span> (clientSocket == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to accept client connection&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Client connected: %s\n&quot;</span>, inet_ntoa(clientAddr.sin_addr));<br><br>    <span class="hljs-regexp">//</span> 接收数据<br>    memset(buffer, <span class="hljs-number">0</span>, sizeof(buffer));<br>    <span class="hljs-keyword">if</span> (recv(clientSocket, buffer, BUFFER_SIZE, <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to receive data&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Client message: %s\n&quot;</span>, buffer);<br><br>    <span class="hljs-regexp">//</span> 发送响应<br>    strcpy(buffer, <span class="hljs-string">&quot;Hello, Client!&quot;</span>);<br>    <span class="hljs-keyword">if</span> (send(clientSocket, buffer, strlen(buffer), <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to send data&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 关闭套接字<br>    close(clientSocket);<br>    close(serverSocket);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/socket.h&gt;</span><br><span class="hljs-comment">#include &lt;arpa/inet.h&gt;</span><br><br><span class="hljs-comment">#define SERVER_IP &quot;127.0.0.1&quot;</span><br><span class="hljs-comment">#define SERVER_PORT 8080</span><br><span class="hljs-comment">#define BUFFER_SIZE 1024</span><br><br>int main() &#123;<br>    int clientSocket;<br>    struct sockaddr_in serverAddr;<br>    char buffer[BUFFER_SIZE];<br><br>    <span class="hljs-regexp">//</span> 创建客户端套接字<br>    clientSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientSocket == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create socket&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 设置服务器地址信息<br>    memset(&amp;serverAddr, <span class="hljs-number">0</span>, sizeof(serverAddr));<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = htons(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (inet_pton(AF_INET, SERVER_IP, &amp;(serverAddr.sin_addr)) &lt;=<br><br> <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to set server IP&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 连接到服务器<br>    <span class="hljs-keyword">if</span> (connect(clientSocket, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr)) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to connect to server&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Connected to server %s:%d\n&quot;</span>, SERVER_IP, SERVER_PORT);<br><br>    <span class="hljs-regexp">//</span> 发送数据<br>    strcpy(buffer, <span class="hljs-string">&quot;Hello, Server!&quot;</span>);<br>    <span class="hljs-keyword">if</span> (send(clientSocket, buffer, strlen(buffer), <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to send data&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 接收响应<br>    memset(buffer, <span class="hljs-number">0</span>, sizeof(buffer));<br>    <span class="hljs-keyword">if</span> (recv(clientSocket, buffer, BUFFER_SIZE, <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to receive data&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Server response: %s\n&quot;</span>, buffer);<br><br>    <span class="hljs-regexp">//</span> 关闭套接字<br>    close(clientSocket);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h3><h4 id="服务器：-1"><a href="#服务器：-1" class="headerlink" title="服务器："></a>服务器：</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_IP <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT 8080</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFER_SIZE 1024</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> serverSocket;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddr, clientAddr;<br>    <span class="hljs-type">socklen_t</span> clientAddrLen;<br>    <span class="hljs-type">char</span> buffer[BUFFER_SIZE];<br><br>    <span class="hljs-comment">// 创建服务端套接字</span><br>    serverSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (serverSocket == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to create socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 设置服务器地址信息</span><br>    <span class="hljs-built_in">memset</span>(&amp;serverAddr, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(serverAddr));<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    serverAddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br><br>    <span class="hljs-comment">// 绑定套接字到指定地址和端口</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(serverSocket, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serverAddr, <span class="hljs-built_in">sizeof</span>(serverAddr)) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to bind socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server listening on port %d...\n&quot;</span>, SERVER_PORT);<br><br>    <span class="hljs-comment">// 接收数据</span><br>    clientAddrLen = <span class="hljs-built_in">sizeof</span>(clientAddr);<br>    <span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buffer));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recvfrom</span>(serverSocket, buffer, BUFFER_SIZE, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;clientAddr, &amp;clientAddrLen) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to receive data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Client message: %s\n&quot;</span>, buffer);<br><br>    <span class="hljs-comment">// 发送响应</span><br>    <span class="hljs-built_in">strcpy</span>(buffer, <span class="hljs-string">&quot;Hello, Client!&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sendto</span>(serverSocket, buffer, <span class="hljs-built_in">strlen</span>(buffer), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;clientAddr, clientAddrLen) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to send data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭套接字</span><br>    <span class="hljs-built_in">close</span>(serverSocket);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户机："><a href="#客户机：" class="headerlink" title="客户机："></a>客户机：</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_IP <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT 8080</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFER_SIZE 1024</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> clientSocket;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddr;<br>    <span class="hljs-type">char</span> buffer[BUFFER_SIZE];<br><br>    <span class="hljs-comment">// 创建客户端套接字</span><br><br><br>    clientSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientSocket == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to create socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 设置服务器地址信息</span><br>    <span class="hljs-built_in">memset</span>(&amp;serverAddr, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(serverAddr));<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">inet_pton</span>(AF_INET, SERVER_IP, &amp;(serverAddr.sin_addr)) &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to set server IP&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Connected to server %s:%d\n&quot;</span>, SERVER_IP, SERVER_PORT);<br><br>    <span class="hljs-comment">// 发送数据</span><br>    <span class="hljs-built_in">strcpy</span>(buffer, <span class="hljs-string">&quot;Hello, Server!&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sendto</span>(clientSocket, buffer, <span class="hljs-built_in">strlen</span>(buffer), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serverAddr, <span class="hljs-built_in">sizeof</span>(serverAddr)) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to send data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 接收响应</span><br>    <span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buffer));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recvfrom</span>(clientSocket, buffer, BUFFER_SIZE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to receive data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server response: %s\n&quot;</span>, buffer);<br><br>    <span class="hljs-comment">// 关闭套接字</span><br>    <span class="hljs-built_in">close</span>(clientSocket);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h2><p><strong>TCP建立连接的三次握手</strong>，在发送数据的准备阶段，客户机与服务器的三次交互，以保证连接可靠<br><strong>第一次握手</strong>：客户端发送一个带有SYN标志的TCP报文段给服务器，请求建立连接。​<br>客户端发送SYN报文：​客户端发送一个SYN&#x3D;1的报文段，序列号设为X。​客户端进入SYN_SENT状态。<br><strong>第二次握手</strong>：服务器收到客户端的SYN报文段后，返回一个带有SYN和ACK标志的TCP报文段给客户端，表示同意建立连接。​<br>服务器发送SYN+ACK报文：​服务器收到SYN报文后，发送一个SYN&#x3D;1、ACK&#x3D;1的报文段，序列号设为Y，确认号设为X+1。​服务器进入SYN_RECEIVED状态。<br><strong>第三次握手</strong>：客户端收到服务器的SYN+ACK报文段后，再发送一个带有ACK标志的TCP报文段给服务器，确认连接建立。​<br>客户端发送ACK报文：客户端收到SYN+ACK报文后，发送一个ACK&#x3D;1的报文段，确认号设为Y+1，序列号设为X+1。此时，双方都进入了ESTABLISHED状态，连接建立完成。</p><p><strong>TCP断开连接的四次挥手</strong><br><strong>第一次挥手</strong>：客户端发送一个带有FIN标志的TCP报文段给服务器，请求关闭连接。​主动关闭的一方发送一个FIN标志置位的报文段给另一方，并进入FIN_WAIT_1状态。​这表示主动关闭方完成了数据发送，并希望关闭该方向的数据传输通道。​<br><strong>第二次挥手</strong>：服务器收到客户端的FIN报文段后，返回一个带有ACK标志的TCP报文段给客户端，表示已确认收到关闭连接的请求。​被动关闭的一方接收到FIN报文后，发送一个ACK报文作为回应，并进入CLOSE_WAIT状态。​这表示被动关闭方确认了主动关闭方的FIN报文，并准备好关闭该方向的数据传输通道。​<br><strong>第三次挥手</strong>：服务器在确认所有数据传输完毕后，发送一个带有FIN标志的TCP报文段给客户端，请求关闭服务器到客户端的连接。​被动关闭的一方在完成自己的数据发送后也会发送一个FIN报文给主动关闭的一方，并进入LAST_ACK状态。​这表示被动关闭方完成了数据发送，并希望关闭相反方向的数据传输通道。​<br><strong>第四次挥手</strong>：客户端收到服务器的FIN报文段后，返回一个带有ACK标志的TCP报文段给服务器，确认连接已完全关闭。主动关闭的一方接收到对方的FIN报文后，发送一个ACK作为回应，并进入TIME_WAIT状态。这表示主动关闭方确认了被动关闭方的FIN报文，并准备好关闭相反方向的数据传输通道。</p><ul><li><p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p></li><li><p>在TCP编程中，你通常需要创建一个服务器和一个客户端。</p></li><li><p>服务器会监听一个特定的端口，等待客户端的连接。</p></li><li><p>客户端会尝试连接到服务器，一旦连接建立，双方就可以通过套接字发送和接收数据。</p></li><li><p>UDP是一种无连接的、不可靠的、基于数据报的传输层通信协议。</p></li><li><p>与TCP不同，UDP不保证数据的顺序或完整性，但它通常具有更低的延迟。</p></li><li><p>UDP编程也涉及服务器和客户端的创建，但不需要建立持久的连接。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
      <category>Socket编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>Socket，计算机网络，进程间通信，tcp/ip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenWrt</title>
    <link href="/2024/08/28/OpenWrt/"/>
    <url>/2024/08/28/OpenWrt/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenWrt路由器"><a href="#OpenWrt路由器" class="headerlink" title="OpenWrt路由器"></a>OpenWrt路由器</h1><p>OpenWrt 项目是一个针对嵌入式设备的 Linux 操作系统，提供了具有软件包管理功能的完全可写的文件系统通过使用适配任何应用的软件包来定制设备。</p><h5 id="文件系统布局"><a href="#文件系统布局" class="headerlink" title="文件系统布局"></a>文件系统布局</h5><p><img src="/img/291.png" alt="图片"> </p><p>&#x2F;etc: 这个目录包含了大部分的配置文件。具体配置文件包括：<br>&#x2F;etc&#x2F;config&#x2F;：包含主要的配置文件，例如网络配置 (network)、无线设置 (wireless)、防火墙设置 (firewall) 等。</p><p>&#x2F;etc&#x2F;config&#x2F;network: 配置网络接口和网络设置。可以在这里设置静态 IP、DHCP 客户端、桥接等。<br>&#x2F;etc&#x2F;config&#x2F;wireless: 配置无线网络接口，包括 SSID、加密类型、无线模式等。<br>&#x2F;etc&#x2F;config&#x2F;firewall: 配置防火墙规则，包括 NAT 和过滤规则。<br>&#x2F;etc&#x2F;config&#x2F;system: 系统设置，包括主机名、时区和其他系统级别的配置。<br>&#x2F;etc&#x2F;config&#x2F;dhcp: 配置 DHCP 服务器和 DHCP 选项。</p><p>&#x2F;etc&#x2F;init.d&#x2F;：包含系统服务的启动脚本，可以用来启动、停止和重启服务。</p><p>&#x2F;lib: 包含了系统库和脚本</p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight plaintext"><figcaption><span>wifi所有的配置文件  qcawificfg80211.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs lib/wifi/">/etc/config 配置文件<br><br>vi /ect/config/wireless<br><br>/etc/config/dhcp    //网络服务配置<br><br>/etc/config/network   //网络接口配置<br><br>/etc/config/firewall    //防火墙配置<br><br>cat /etc/config/network  //查看配置<br><br>uci show network  //uci配置查看命令<br><br>uci set network.lan.proto=dhcp  //配置动态获取<br><br>uci set network.lan.proto=&#x27;static&#x27;  //配置静态IP<br><br>uci set network.lan.ipaddr=&#x27;192.168.10.100&#x27;  //设置LAN口的IP地址<br><br>uci set network.lan.netmask=&#x27;255.255.255.0&#x27; //设置LAN口的子网掩码<br><br>uci set network.lan.gateway=&#x27;192.168.10.1&#x27;  //设置LAN口的网关地址<br><br>uci set network.lan.dns=&#x27;8.8.8.8&#x27; //设置DNS服务器地址<br><br>uci set network.lan.dns=&#x27;8.8.8.8 8.8.4.4&#x27;   //多个DNS服务器<br><br>uci commit network  //保存修改后的配置<br><br>/etc/init.d/network restart  //重启网络<br><br>brctl show  //查看桥<br><br>hotplug热插拔<br><br>/etc/hotplug.d/button<br><br>vim 51-wps-reset   //长按wps键输出“自定义语句”，松开后重启<br><br>ubus list  显示所有的注册的服务<br><br>ubus -v list 显示更详细的信息<br><br>ubus -v list network.device：显示某个服务注册的功能<br><br>ps |grep lighttp<br><br>vi /etc/lighttpd/lighttpd.conf<br><br>ps |grep uhttp<br><br>/etc/init.d/lighttpd restart<br><br>/etc/init.d/uhttpd restart<br><br>ethtool eth0 //查看接口的工作协议（全双工、半双工） <br><br></code></pre></td></tr></table></figure><h5 id="创建和维护自定义-OpenWrt-软件包，编写-Makefile-和配置文件"><a href="#创建和维护自定义-OpenWrt-软件包，编写-Makefile-和配置文件" class="headerlink" title="创建和维护自定义 OpenWrt 软件包，编写 Makefile 和配置文件"></a>创建和维护自定义 OpenWrt 软件包，编写 Makefile 和配置文件</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mkdir package/helloworld<br><span class="hljs-keyword">cd</span> package/helloworld/<br>mkdir src<br><span class="hljs-keyword">cd</span> src/<br>vim helloworld.c  <span class="hljs-string">//</span>编写C程序<br>vim makefile  <span class="hljs-string">//</span>编写编译指令，将C源程序编译为可执行文件<br><span class="hljs-keyword">cd</span> <span class="hljs-string">../</span><br>vim Makefile  <span class="hljs-string">//</span>编写主Makefile，编译和安装软件包<br>make menuconfig  <span class="hljs-string">//</span>选择软件包helloworld 并标记为编译<br>make <span class="hljs-string">./package/helloworld/</span>&#123;clean,prepare,compile&#125; V=s  <span class="hljs-string">//</span>编译软件包<br>bin/ipq/<span class="hljs-string">./packages/base/helloworld_1.0-1_ipq.ipk</span>   <span class="hljs-string">//</span>打包成<span class="hljs-string">.ipk</span>文件并安装到OpenWrt系统<br><br>在板子上: <br><span class="hljs-keyword">cd</span> <span class="hljs-string">/tmp/</span><br>tftp -g -r helloworld_1.0-1_ipq.ipk x.x.x.x   <span class="hljs-string">//tftp</span>传输<br>opkg install helloworld_1.0-1_ipq.ipk  <span class="hljs-string">//</span>通过opkg安装<br>helloworld  <span class="hljs-string">//</span>运行程序<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>OpenWrt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>网络项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/27/hello-world/"/>
    <url>/2024/08/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

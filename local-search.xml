<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CMake</title>
    <link href="/2024/09/04/CMake/"/>
    <url>/2024/09/04/CMake/</url>
    
    <content type="html"><![CDATA[<h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><p><strong>CMake</strong> 是一个跨平台的构建系统生成器，它可以生成各种构建工具所需的文件，如 Makefile、Ninja、Visual Studio 解决方案等。CMake 使用 <code>CMakeLists.txt</code> 文件来描述项目的构建规则。</p><p>项目结构如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">/path/to/your/project/<br>├── CMakeLists<span class="hljs-selector-class">.txt</span><br>├── build   <span class="hljs-comment">//在此目录下运行cmake ..生成构建文件</span><br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.h</span><br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span><br>├── hello<span class="hljs-selector-class">.c</span><br>└── world.c<br></code></pre></td></tr></table></figure><p>CMakeLists.txt的内容如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">cmake_minimum_required</span><span class="hljs-params">(VERSION <span class="hljs-number">3.5</span>)</span></span>  <span class="hljs-comment">//指定最低版本要求</span><br><br><span class="hljs-function"><span class="hljs-title">project</span><span class="hljs-params">(main)</span></span>  <span class="hljs-comment">//定义项目名称</span><br><br><span class="hljs-function"><span class="hljs-title">add_executable</span><span class="hljs-params">(main main.c hello.c world.c)</span></span> <span class="hljs-comment">//创建可执行文件并指定源文件</span><br></code></pre></td></tr></table></figure><p>构建过程</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>运行cmake生成build文件<br>mkdir  build<br><span class="hljs-keyword">cd</span> build<br>cmake  . .<br><br><span class="hljs-string">//</span>编译项目<br>make<br><br>运行可执行文件<br><span class="hljs-string">./main</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 构建工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Makefile</title>
    <link href="/2024/09/04/Makefile/"/>
    <url>/2024/09/04/Makefile/</url>
    
    <content type="html"><![CDATA[<h1 id="Makefile和make"><a href="#Makefile和make" class="headerlink" title="Makefile和make"></a>Makefile和make</h1><p>自动化编译和构建过程，极大提高软件开发的编译效率和自动化水平</p><p>目标文件，依赖文件，如果没有依赖文件，去执行命令，生成依赖文件</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">default</span>: main.c world.c hello.c<br>gcc main.c world.c hello.c -o main -I .<br><br><span class="hljs-keyword">default</span>: <br>gcc main.c world.c hello.c -o main -I .<br><br>CC=gcc<br>TARGET=main<br>OBJ=main.o world.o hello.o<br><br>$&#123;TARGET&#125;: $&#123;OBJ&#125;<br>$&#123;CC&#125; -o $&#123;TARGET&#125; $&#123;OBJ&#125;<br><br>main.o: main.c<br>$&#123;CC&#125; -c main.c<br><br>world.o: world.c<br>$&#123;CC&#125; -c world.c<br><br>hello.o: hello.c<br>$&#123;CC&#125; -c hello.c<br><br>CC=gcc<br>TARGET=main<br>OBJ=main.o world.o hello.o<br><br>CFLAGS= -c -w -g3 -o3<br>INC= -I .<br>LIB_PATH= -L<br>LIB=-lpthread -lm<br><br>$&#123;TARGET&#125;: $&#123;OBJ&#125;<br>$&#123;CC&#125; -o $@ $^ $&#123;INC&#125;<br><br>%.o: %.c<br>$&#123;CC&#125; $&#123;CFLAGS&#125; $&lt; -o $@ $&#123;INC&#125; $&#123;LIB_PATH&#125; $&#123;LIB&#125;<br><br>clean:<br>rm -rf  * .o  main<br><br><br>CC=gcc<br>TARGET=main<br>SRC=$(wildcard * .c)<br>OBJ=$(patsubst %.c, %.o, $&#123;SRC&#125;)<br><br>CFLAGS= -c -w -g3 -o3<br><br>$&#123;TARGET&#125;: $&#123;OBJ&#125;<br>$&#123;CC&#125; -o $@ $^ <br><br>%.o: %.c<br>$&#123;CC&#125; $&#123;CFLAGS&#125; $&lt; -o $@<br><br>.PHONY： clean <span class="hljs-comment">//伪目标，指明不是目标文件，是目标命令</span><br><br>clean:<br>rm -rf  * .o  main<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs powershell">make <span class="hljs-operator">-f</span> makefile    //指定一个非默认的Makefile文件<br>make <span class="hljs-operator">-f</span> build.mk<br><br>Makefile 定义了目标，依赖，命令(命令必须以tab键开始)<br>mainCR:add.c sub.c main.c<br>gcc add.c sub.c main.c <span class="hljs-literal">-o</span> main<br><br><span class="hljs-variable">$</span>表示变量或函数的引用<br><br>Makefile文件中大小写敏感，使用大写字母来定义变量<br><br><span class="hljs-variable">$</span><span class="hljs-selector-tag">@</span>  <br>表示目标文件（即 .o文件）<br><span class="hljs-variable">$</span>&lt;  <br>表示依赖文件（即 .c文件）<br><span class="hljs-variable">$</span>^  <br>表示所有的依赖文件列表，每个依赖项之间以空格隔开<br><br> <span class="hljs-comment">#  编译器和选项 </span><br> CC = gcc <br> CFLAGS = <span class="hljs-literal">-Wall</span> <br> AR = ar <br> ARFLAGS = rcs<br> <br>  <span class="hljs-comment"># 源文件和目标文件 </span><br>  SRCS = add.c subtract.c <br>  OBJS = <span class="hljs-variable">$</span>(SRCS:.c=.o) <br>  LIB = libmath.a <br>  TEST = test <br>  <br>  <span class="hljs-comment"># 默认目标</span><br>   all: <span class="hljs-variable">$</span>(LIB) <span class="hljs-variable">$</span>(TEST) <br>   <br>  <span class="hljs-comment"># 编译源文件为目标文件</span><br>   %.o: %.c <span class="hljs-variable">$</span>(CC) <span class="hljs-variable">$</span>(CFLAGS) <span class="hljs-literal">-c</span> <span class="hljs-variable">$</span>&lt; <span class="hljs-literal">-o</span> <span class="hljs-variable">$</span><span class="hljs-selector-tag">@</span> <br>   <br>   <span class="hljs-comment"># 创建静态库 </span><br>   <span class="hljs-variable">$</span>(LIB): <span class="hljs-variable">$</span>(OBJS) <span class="hljs-variable">$</span>(AR) <span class="hljs-variable">$</span>(ARFLAGS) <span class="hljs-variable">$</span><span class="hljs-selector-tag">@</span> <span class="hljs-variable">$</span>(OBJS) <br>   <br>  <span class="hljs-comment"># 编译测试程序并链接到静态库 </span><br>  <span class="hljs-variable">$</span>(TEST): test.c <span class="hljs-variable">$</span>(LIB) <span class="hljs-variable">$</span>(CC) <span class="hljs-variable">$</span>(CFLAGS) <span class="hljs-variable">$</span>&lt; <span class="hljs-literal">-o</span> <span class="hljs-variable">$</span><span class="hljs-selector-tag">@</span> <span class="hljs-literal">-L</span>. <span class="hljs-literal">-lmath</span> <br>  <br>  <span class="hljs-comment"># 清理构建文件 </span><br>  clean: <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> <span class="hljs-variable">$</span>(OBJS) <span class="hljs-variable">$</span>(LIB) <span class="hljs-variable">$</span>(TEST) <br>  <br>  <span class="hljs-comment"># 运行测试程序 </span><br>  run: <span class="hljs-variable">$</span> (TEST) ./<span class="hljs-variable">$</span>(TEST)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux 构建工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2024/09/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>设计模式是在软件工程中用来解决常见问题的一套通用解决方案。</p><p>以下是C++ 中常用的设计模式及其简要说明：</p><h3 id="1-单例模式（Singleton-Pattern）"><a href="#1-单例模式（Singleton-Pattern）" class="headerlink" title="1. 单例模式（Singleton Pattern）"></a>1. 单例模式（Singleton Pattern）</h3><p>单例模式确保一个类只有一个实例，并提供一个全局访问点来访问这个唯一实例。</p><p>懒汉式，线程不安全，在第一次使用才创建实例。多线程的时候同时创建产生多个实例，不安全。<br>饿汉式，在类加载时就完成初始化。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cpp<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> Singleton* instance;<br>    <span class="hljs-built_in">Singleton</span>() &#123;&#125;  <span class="hljs-comment">// 私有构造函数</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!instance) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 实现功能</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 初始化静态成员</span><br>Singleton* Singleton::instance = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Singleton* s = Singleton::<span class="hljs-built_in">getInstance</span>();<br>    s-&gt;<span class="hljs-built_in">doSomething</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-工厂模式（Factory-Pattern）"><a href="#2-工厂模式（Factory-Pattern）" class="headerlink" title="2. 工厂模式（Factory Pattern）"></a>2. 工厂模式（Factory Pattern）</h3><p>工厂模式提供了一种创建对象的接口，但允许子类决定实例化哪个类。</p><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs perl">cpp<br><br><span class="hljs-comment">#include &lt;iostream&gt;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>&#123;<br>public:<br>    virtual void operation() = <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteProductA</span><span class="hljs-attr"> : public</span> <span class="hljs-title">Product</span> </span>&#123;<br>public:<br>    void operation() override &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteProductA&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteProductB</span><span class="hljs-attr"> : public</span> <span class="hljs-title">Product</span> </span>&#123;<br>public:<br>    void operation() override &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteProductB&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span> </span>&#123;<br>public:<br>    virtual Product* createProduct() = <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteFactoryA</span><span class="hljs-attr"> : public</span> <span class="hljs-title">Factory</span> </span>&#123;<br>public:<br>    Product* createProduct() override &#123;<br>        <span class="hljs-keyword">return</span> new ConcreteProductA();<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteFactoryB</span><span class="hljs-attr"> : public</span> <span class="hljs-title">Factory</span> </span>&#123;<br>public:<br>    Product* createProduct() override &#123;<br>        <span class="hljs-keyword">return</span> new ConcreteProductB();<br>    &#125;<br>&#125;;<br><br><span class="hljs-regexp">//</span> 使用示例<br><span class="hljs-keyword">int</span> main() &#123;<br>    Factory* factoryA = new ConcreteFactoryA();<br>    Product* productA = factoryA-&gt;createProduct();<br>    productA-&gt;operation();<br><br>    Factory* factoryB = new ConcreteFactoryB();<br>    Product* productB = factoryB-&gt;createProduct();<br>    productB-&gt;operation();<br><br>    <span class="hljs-keyword">delete</span> factoryA;<br>    <span class="hljs-keyword">delete</span> productA;<br>    <span class="hljs-keyword">delete</span> factoryB;<br>    <span class="hljs-keyword">delete</span> productB;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-观察者模式（Observer-Pattern）"><a href="#3-观察者模式（Observer-Pattern）" class="headerlink" title="3. 观察者模式（Observer Pattern）"></a>3. 观察者模式（Observer Pattern）</h3><p>观察者模式定义了对象之间的一对多依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都会得到通知并自动更新。</p><h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cpp<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;Observer*&gt; observers;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addObserver</span><span class="hljs-params">(Observer* observer)</span> </span>&#123;<br>        observers.<span class="hljs-built_in">push_back</span>(observer);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer* observer)</span> </span>&#123;<br>        observers.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">remove</span>(observers.<span class="hljs-built_in">begin</span>(), observers.<span class="hljs-built_in">end</span>(), observer), observers.<span class="hljs-built_in">end</span>());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; obs : observers) &#123;<br>            obs-&gt;<span class="hljs-built_in">update</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">someAction</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 模拟状态改变</span><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;State changed&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">notifyObservers</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver</span> : <span class="hljs-keyword">public</span> Observer &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Observer notified&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Subject subject;<br>    ConcreteObserver observer1;<br>    ConcreteObserver observer2;<br><br>    subject.<span class="hljs-built_in">addObserver</span>(&amp;observer1);<br>    subject.<span class="hljs-built_in">addObserver</span>(&amp;observer2);<br><br>    subject.<span class="hljs-built_in">someAction</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-装饰器模式（Decorator-Pattern）"><a href="#4-装饰器模式（Decorator-Pattern）" class="headerlink" title="4. 装饰器模式（Decorator Pattern）"></a>4. 装饰器模式（Decorator Pattern）</h3><p>装饰器模式允许向一个现有对象添加新的功能，同时保持类的结构不变。</p><h4 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cpp<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteComponent</span> : <span class="hljs-keyword">public</span> Component &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteComponent&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Decorator</span> : <span class="hljs-keyword">public</span> Component &#123;<br><span class="hljs-keyword">protected</span>:<br>    Component* component;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Decorator</span>(Component* comp) : <span class="hljs-built_in">component</span>(comp) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        component-&gt;<span class="hljs-built_in">operation</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteDecoratorA</span> : <span class="hljs-keyword">public</span> Decorator &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteDecoratorA</span>(Component* comp) : <span class="hljs-built_in">Decorator</span>(comp) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        Decorator::<span class="hljs-built_in">operation</span>();<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteDecoratorA&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteDecoratorB</span> : <span class="hljs-keyword">public</span> Decorator &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteDecoratorB</span>(Component* comp) : <span class="hljs-built_in">Decorator</span>(comp) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        Decorator::<span class="hljs-built_in">operation</span>();<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteDecoratorB&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Component* component = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteComponent</span>();<br>    Component* decoratorA = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteDecoratorA</span>(component);<br>    Component* decoratorB = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteDecoratorB</span>(decoratorA);<br><br>    decoratorB-&gt;<span class="hljs-built_in">operation</span>();<br><br>    <span class="hljs-keyword">delete</span> decoratorB;<br>    <span class="hljs-keyword">delete</span> decoratorA;<br>    <span class="hljs-keyword">delete</span> component;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-原型模式（Prototype-Pattern）"><a href="#5-原型模式（Prototype-Pattern）" class="headerlink" title="5. 原型模式（Prototype Pattern）"></a>5. 原型模式（Prototype Pattern）</h3><p>原型模式通过复制现有的对象来创建新对象，而不是通过构造函数来创建。</p><h4 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cpp<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prototype</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Prototype* <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcretePrototype</span> : <span class="hljs-keyword">public</span> Prototype &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Prototype* <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcretePrototype</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 使用示例</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcretePrototype original;<br>    std::unique_ptr&lt;Prototype&gt; cloned = std::<span class="hljs-built_in">make_unique</span>&lt;ConcretePrototype&gt;(original);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++ 设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++特性</title>
    <link href="/2024/09/02/C++-%E7%89%B9%E6%80%A7/"/>
    <url>/2024/09/02/C++-%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象编程三大特性"><a href="#面向对象编程三大特性" class="headerlink" title="面向对象编程三大特性"></a>面向对象编程三大特性</h1><p><strong>封装</strong>  隐藏对象的属性和实现细节，仅对外提供公共接口。即将数据（属性）和操作这些数据的方法（函数）封装在一起，外界只能通过预定义的接口与之交互，无需知道内部的具体实现。这样做能隐藏细节，减少错误，增强模块间的独立性。<br><strong>继承</strong>  子类继承父类的属性和方法，并能添加新的属性和方法或重写父类的方法。允许创建一个新的类（派生类），继承自己存在的类（基类），从而继承其属性和方法，并可以添加或修改自己的新特性，有助于代码的复用与扩展。<br><strong>多态</strong>  允许一个接口被多种数据类型实现，或者说一个接口可以有多种不同的实现方法。指的是允许使用一个接口以表示不同类型的对象，从而使得代码在处理不同对象时具有通用性。多态分为编译时多态（重载）和运行时多态（重写&#x2F;虚函数）</p><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">class</span> 类名&#123;<br>    <span class="hljs-keyword">public</span>：  <span class="hljs-comment">//可以从类的外部直接访问</span><br>        <span class="hljs-comment">//公有数据成员； </span><br>        <span class="hljs-comment">//公有成员函数；</span><br>    <span class="hljs-keyword">protected</span>:   <span class="hljs-comment">//在类内部和派生类可以访问，类的外部无法直接访问，实现继承关系的共享功能</span><br>        <span class="hljs-comment">//保护数据成员；</span><br>        <span class="hljs-comment">//保护成员函数；</span><br>    <span class="hljs-keyword">private</span>:       <span class="hljs-comment">//只能在类内部访问，外部代码无法直接访问</span><br>        <span class="hljs-comment">//私有数据成员；</span><br>        <span class="hljs-comment">//私有成员函数；</span><br>&#125;;<span class="hljs-comment">//不能在类声明中给数据成员赋初值。</span><br></code></pre></td></tr></table></figure><p><strong>类的默认成员函数</strong><br>构造函数     初始化对象<br>析构函数     清理<br>拷贝构造     使用同类对象初始化创建对象<br>赋值重载      把一个对象赋值给另一个对象<br>取地址重载   普通对象和const对象取地址</p><p><strong>静态成员数据</strong>，在类定义中声明，必须在类外部定义和初始化。推荐使用类名访问。<br>静态成员数据的生命周期与程序的生命周期相同。<br>通过类的成员函数来访问和修改。<br>初始化发生在程序启动时，早于对象的构造。</p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><ul><li><strong>深拷贝</strong>：不仅拷贝指针，对指针指向的内容进行拷贝，深拷贝后两个指针指向两个不同的地址。</li><li><strong>浅拷贝</strong>：只是对指针的拷贝，拷贝后两个指针指向同一个内存空间。</li><li>写实拷贝：内核只为新生成的子进程创建虚拟空间结构，它们来复制于父进程的虚拟地址结构，但是不为这段分配物理内存，它们共享父进程的物理空间，当父进程中有更改相应段的行为发生时，再为子进程相应的段分配物理空间。</li></ul><p>类的生命周期：加载、验证、准备、解析、初始化、使用、卸载（验证、准备、解析统称为链接）</p><p>空类的大小是1字节</p><p>new 分配内存，调用对象的构造内存<br>delete 释放内存，调用对象的析构函数<br>new和delete 自动计算所需内存大小</p><p>explicit  用于阻止类或结构体中的构造函数进行隐式类型转换</p><p><strong>继承</strong><br>构造函数、析构函数、赋值运算符不能继承</p><p>构造时，先调用基类的构造函数，再调用派生类的构造函数<br>析构时，先调用派生类的析构函数，再调用基类的析构函数</p><p><strong>多态</strong><br>编译时多态，通过函数重载和模板实现<br>运行时多态，通过虚函数实现</p><p><strong>重载</strong>overload，将语义相近的几个函数用同一个名字表示，但是参数列表（参数的类型，个数，顺序不同）不同，这就是函数重载，返回值类型可以不同</p><p>特征：相同范围（同一个类中）、函数名字相同、参数不同、virtual关键字可有可无</p><p><strong>重定义</strong>override，派生类屏蔽了其同名的基类函数，返回值类型可以不同</p><p>特征：不同范围（基类和派生类）、函数名字相同、参数不同或者参数相同且无virtual关键字</p><p><strong>重写</strong>overwrite，派生类覆盖基类的虚函数，实现接口的重用，返回值类型必须相同</p><p>特征：不同范围（基类和派生类）、函数名字相同、参数相同、基类中必须有virtual关键字（必须是虚函数）</p><p><strong>作用域</strong><br>全局、局部、类、语句、命名空间、文件作用域</p><p><strong>右值引用</strong><br>一种特殊的引用类型，专门用来绑定到右值。右值通常指的是那些临时的对象或者是那些不具有名称的对象，例如函数返回值、字面量常量、临时对象等。<br>声明右值引用在类型后加&amp;&amp;，例如 int&amp;&amp; data;<br>右值引用只能绑定右值，不能绑定左值<br>右值引用主要用来支持移动语义和完美转发</p><p><strong>移动语义</strong><br>允许编译器在某些情况下选择移动资源而非复制资源，从而提高程序的性能<br>涉及移动构造函数和移动赋值运算符</p><ul><li><strong>移动构造函数</strong>：用于从一个右值构造一个新的对象，通常会将资源从一个对象移动到另一个对象。</li><li><strong>移动赋值运算符</strong>：用于将一个右值对象的状态移动到一个已存在的对象中，通常会释放已有资源并获取新资源。</li></ul><p><strong>const和define的区别</strong></p><ol><li>const生效于编译的阶段；define生效于预处理阶段。</li><li>const定义的常量，在C语言中是存储在内存中、需要额外的内存空间的；define定义的常量，运行时是直接的操作数，并不会存放在内存中。</li><li>const定义的常量是带类型的；define定义的常量不带类型。因此define定义的常量不利于类型检查。</li></ol>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++ 面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表_C</title>
    <link href="/2024/08/31/%E9%93%BE%E8%A1%A8-C/"/>
    <url>/2024/08/31/%E9%93%BE%E8%A1%A8-C/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>​链表是一种基本的数据结构，它由一系列节点（Node）组成，这些节点相互链接在一起。每个节点都保存了一个数据元素和一个指向下一个节点的指针。这种数据结构非常灵活，可以动态地增长或缩小，不需要预先分配固定大小的内存空间。链表是一种物理存储单元上非连续、非顺序的存储结构；数据元素的逻辑顺序是通过链表中的指针链接次序来实现的。</p><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>单向链表（Singly Linked List）是一种线性数据结构，其中每个元素（通常称为节点）包含两部分：数据域和链接域。数据域用于存储实际的数据值，而链接域则存储指向链表中下一个节点的引用或指针。链表的最后一个节点的链接域指向一个空值（通常为NULL），表示链表的结束。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> <span class="hljs-comment">// 包含标准库，提供内存分配和释放等功能</span></span><br><br><span class="hljs-comment">// 定义链表节点结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;           <span class="hljs-comment">// 数据域，存储节点的数据值</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* next;  <span class="hljs-comment">// 指针域，指向下一个节点的指针</span><br>&#125; Node;<br><br><span class="hljs-comment">// 函数原型声明</span><br><span class="hljs-function">Node* <span class="hljs-title">createNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertAtPosition</span><span class="hljs-params">(Node** head, <span class="hljs-type">int</span> data, <span class="hljs-type">int</span> position)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertAtEnd</span><span class="hljs-params">(Node** head, <span class="hljs-type">int</span> data)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertAtBeginning</span><span class="hljs-params">(Node** head, <span class="hljs-type">int</span> data)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(Node** head, <span class="hljs-type">int</span> data)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(Node* head)</span></span>;<br><br><span class="hljs-comment">// 创建新节点的函数</span><br><span class="hljs-function">Node* <span class="hljs-title">createNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span> </span>&#123;<br>    <span class="hljs-comment">// 使用malloc分配内存空间，并转换为Node*类型</span><br>    Node* newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));<br>    <span class="hljs-comment">// 检查内存是否成功分配</span><br>    <span class="hljs-keyword">if</span> (!newNode) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Memory allocation failed!\n&quot;</span>); <span class="hljs-comment">// 打印错误消息</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 退出程序，返回错误代码1</span><br>    &#125;<br>    newNode-&gt;data = data; <span class="hljs-comment">// 设置新节点的数据</span><br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 新节点的next指针初始化为NULL</span><br>    <span class="hljs-keyword">return</span> newNode; <span class="hljs-comment">// 返回新节点的指针</span><br>&#125;<br><br><span class="hljs-comment">// 在链表末尾插入节点的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertAtEnd</span><span class="hljs-params">(Node** head, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-built_in">createNode</span>(data); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (*head == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 如果链表为空</span><br>        *head = newNode; <span class="hljs-comment">// 新节点成为头节点</span><br>    &#125;<br><span class="hljs-keyword">else</span> &#123;<br>        Node* current = *head; <span class="hljs-comment">// 从头节点开始遍历</span><br>        <span class="hljs-keyword">while</span> (current-&gt;next != <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 遍历到链表末尾</span><br>            current = current-&gt;next;<br>        &#125;<br>        current-&gt;next = newNode; <span class="hljs-comment">// 在链表末尾插入新节点</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 在链表头部插入节点的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertAtBeginning</span><span class="hljs-params">(Node** head, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    Node* newNode = <span class="hljs-built_in">createNode</span>(data); <span class="hljs-comment">// 创建新节点</span><br>    newNode-&gt;next = *head; <span class="hljs-comment">// 新节点的next指向原头节点</span><br>    *head = newNode; <span class="hljs-comment">// 更新头节点为新节点</span><br>&#125;<br><br><span class="hljs-comment">// 在链表指定位置插入节点的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertAtPosition</span><span class="hljs-params">(Node** head, <span class="hljs-type">int</span> data, <span class="hljs-type">int</span> position)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果是要插入到链表头部，则调用已有的头部插入函数</span><br>    <span class="hljs-keyword">if</span> (position == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">insertAtBeginning</span>(head, data);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    Node* newNode = <span class="hljs-built_in">createNode</span>(data); <span class="hljs-comment">// 创建新节点</span><br><br>    Node* current = *head; <span class="hljs-comment">// 当前节点</span><br>    Node* previous = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 前一个节点</span><br>    <span class="hljs-type">int</span> currentPosition = <span class="hljs-number">0</span>; <span class="hljs-comment">// 当前位置计数器</span><br><br>    <span class="hljs-comment">// 遍历链表直到找到目标位置或到达链表末尾</span><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span> &amp;&amp; currentPosition &lt; position) &#123;<br>        previous = current;<br>        current = current-&gt;next;<br>        currentPosition++;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果位置合法且未超出链表长度</span><br>    <span class="hljs-keyword">if</span> (currentPosition == position) &#123;<br>        previous-&gt;next = newNode; <span class="hljs-comment">// 将新节点插入到前一个节点之后</span><br>        newNode-&gt;next = current; <span class="hljs-comment">// 新节点的next指针指向当前位置的节点</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid position or out of bounds. Insertion failed.\n&quot;</span>);<br>        <span class="hljs-built_in">free</span>(newNode); <span class="hljs-comment">// 释放新节点内存，因为插入失败</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 删除指定数据的节点的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(Node** head, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (*head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 空链表，直接返回</span><br>    Node* current = *head; <span class="hljs-comment">// 从头节点开始查找</span><br>    Node* prev = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 用于记录当前节点的前一个节点</span><br><br>    <span class="hljs-comment">// 如果头节点的数据就是要删除的数据</span><br>    <span class="hljs-keyword">if</span> (current-&gt;data == data) &#123;<br>        *head = current-&gt;next; <span class="hljs-comment">// 更新头节点</span><br>        <span class="hljs-built_in">free</span>(current); <span class="hljs-comment">// 释放原头节点的内存 </span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 遍历链表查找要删除的节点</span><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span> &amp;&amp; current-&gt;data != data) &#123;<br>        prev = current;<br>        current = current-&gt;next;<br>    &#125;<br> <br>    <span class="hljs-comment">// 如果没找到要删除的节点，直接返回</span><br>    <span class="hljs-keyword">if</span> (current == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br> <br>    <span class="hljs-comment">// 删除找到的节点</span><br>    prev-&gt;next = current-&gt;next;<br>    <span class="hljs-built_in">free</span>(current);<br>&#125;<br> <br><span class="hljs-comment">// 打印链表的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(Node* head)</span> </span>&#123;<br>    Node* current = head; <span class="hljs-comment">// 从头节点开始遍历</span><br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, current-&gt;data); <span class="hljs-comment">// 打印当前节点的数据</span><br>        current = current-&gt;next; <span class="hljs-comment">// 移动到下一个节点</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); <span class="hljs-comment">// 打印换行符</span><br>&#125;  <br><br><span class="hljs-comment">// 主函数，用于测试链表操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Node* head = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 初始化空链表</span><br><br>    <span class="hljs-comment">// 在链表末尾插入节点</span><br>    <span class="hljs-built_in">insertAtEnd</span>(&amp;head, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">insertAtEnd</span>(&amp;head, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">insertAtEnd</span>(&amp;head, <span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在链表末尾插入节点：&quot;</span>);<br>    <span class="hljs-built_in">printList</span>(head); <span class="hljs-comment">// 输出：10 20 30</span><br> <br>    <span class="hljs-comment">// 在链表头部插入节点</span><br>    <span class="hljs-built_in">insertAtBeginning</span>(&amp;head, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在头部插入5后的链表：&quot;</span>);<br>    <span class="hljs-built_in">printList</span>(head); <span class="hljs-comment">// 输出：5 10 20 30</span><br><br>        <span class="hljs-comment">// 在链表中间位置插入节点</span><br>    <span class="hljs-built_in">insertAtPosition</span>(&amp;head, <span class="hljs-number">15</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在位置2插入15后的链表：&quot;</span>);<br>    <span class="hljs-built_in">printList</span>(head); <span class="hljs-comment">// 输出：5 10 15 20 30</span><br> <br>    <span class="hljs-comment">// 删除节点</span><br>    <span class="hljs-built_in">deleteNode</span>(&amp;head, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除20后的链表：&quot;</span>);<br>    <span class="hljs-built_in">printList</span>(head); <span class="hljs-comment">// 输出：5 10 30</span><br> <br>    <span class="hljs-comment">// 释放链表内存</span><br>    Node* current = head;<br>    Node* next;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        next = current-&gt;next; <span class="hljs-comment">// 记录下一个节点</span><br>        <span class="hljs-built_in">free</span>(current); <span class="hljs-comment">// 释放当前节点内存</span><br>        current = next; <span class="hljs-comment">// 移动到下一个节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 程序正常退出</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>双向链表（Doubly Linked List）是一种更为复杂的链表结构，它允许数据元素双向链接。在双向链表中，每个节点不仅包含数据部分，还包含指向前一个节点和后一个节点的指针。这使得双向链表在数据操作上更为灵活，支持双向遍历。</p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>循环链表是一种特殊类型的链表，与普通链表的主要区别在于其最后一个节点的next指针不再指向NULL，而是指向链表的头节点，形成了一个闭环。这种结构使得链表中的遍历可以从任一节点开始，并且持续进行，直到再次回到起点，不会遇到终止条件。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然理论上每个节点可以存放不同类型的数据，但在实际应用中，为了保持数据结构的清晰和操作的简便，通常要求链表中所有节点存储的内容类型一致，或者是具有相同结构的复合类型（如结构体）。</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言 数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Socket_C</title>
    <link href="/2024/08/29/Socket-C/"/>
    <url>/2024/08/29/Socket-C/</url>
    
    <content type="html"><![CDATA[<h1 id="Socket基础"><a href="#Socket基础" class="headerlink" title="Socket基础"></a>Socket基础</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>​socket(套接字)是一种进程间通信机制，上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。‌<strong>套接指的是套接管，就是将两根水管套接起来的管子，然后“字”是此连接的数据标识，即一个WORD，所以套接字就是一个标识连接的数据体。</strong><br>    对于协议栈都是集成在操作系统里，我们关心的是我们的应用程序的数据能不能正常的发送出去和接收服务端发回来的数据。这就需要一个桥梁，一端连接操作系统的协议栈，一端连接用户的应用数据。socket就是这个桥梁。套接字有三种类型：流式套接字（SOCK_STREAM，基于TCP）、数据报套接字（SOCK_DGRAM，基于UDP）和原始套接字（SOCK_RAW）。</p><p><strong>三要素</strong>：协议 TCP&#x2F;UDP、ip地址、端口号</p><p>利用 协议+IP地址+端口号 就可以标识网络中的进程了，进程间的通信就可以利用这个标识与其它进程进行交互。</p><h2 id="二、基本步骤"><a href="#二、基本步骤" class="headerlink" title="二、基本步骤"></a>二、基本步骤</h2><h3 id="TCP开发流程"><a href="#TCP开发流程" class="headerlink" title="TCP开发流程"></a>TCP开发流程</h3><p><img src="/img/sockettcp.png" alt="TCP"></p><h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span> serverSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//创建套接字</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddress; <br>serverAddress.sin_family = AF_INET;<br>serverAddress.sin_port = <span class="hljs-built_in">htons</span>(port); <br>serverAddress.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY); <br><span class="hljs-built_in">bind</span>(serverSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress, <span class="hljs-built_in">sizeof</span>(serverAddress));<span class="hljs-comment">//绑定地址</span><br><br><span class="hljs-built_in">listen</span>(serverSocket, backlog); <span class="hljs-comment">//监听连接</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> clientAddress; <br><span class="hljs-type">int</span> clientSocket = <span class="hljs-built_in">accept</span>(serverSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;clientAddress,<span class="hljs-built_in">sizeof</span>(clientAddress)); <span class="hljs-comment">//接受连接</span><br><br><span class="hljs-built_in">send</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>); <span class="hljs-comment">//发送数据</span><br><span class="hljs-built_in">recv</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>); <span class="hljs-comment">//接收数据</span><br><br><span class="hljs-built_in">close</span>(clientSocket); <br><span class="hljs-built_in">close</span>(serverSocket); <span class="hljs-comment">//关闭连接</span><br></code></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span> clientSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//创建套接字</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddress; <br>serverAddress.sin_family = AF_INET; <br>serverAddress.sin_port = <span class="hljs-built_in">htons</span>(port); <br>serverAddress.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(serverIP); <br><span class="hljs-built_in">connect</span>(clientSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress, <span class="hljs-built_in">sizeof</span>(serverAddress)); <span class="hljs-comment">//连接服务器</span><br><br><span class="hljs-built_in">send</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>); <span class="hljs-comment">//发送数据</span><br><span class="hljs-built_in">recv</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>); <span class="hljs-comment">//接收数据</span><br><br><span class="hljs-built_in">close</span>(clientSocket); <span class="hljs-comment">//关闭连接</span><br></code></pre></td></tr></table></figure><h3 id="UDP开发流程"><a href="#UDP开发流程" class="headerlink" title="UDP开发流程"></a>UDP开发流程</h3><p><img src="/img/socketudp.png" alt="UDP"></p><h4 id="服务器端-1"><a href="#服务器端-1" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span> serverSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//创建套接字</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddress; <br>serverAddress.sin_family = AF_INET; <br>serverAddress.sin_port = <span class="hljs-built_in">htons</span>(port); <br>serverAddress.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY); <br><span class="hljs-built_in">bind</span>(serverSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress, <span class="hljs-built_in">sizeof</span>(serverAddress)); <span class="hljs-comment">//绑定地址</span><br><br><span class="hljs-comment">//接收数据</span><br><span class="hljs-built_in">recvfrom</span>(serverSocket, buffer, size, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;clientAddress,<span class="hljs-built_in">sizeof</span>(clientAddress)); <br><br><span class="hljs-comment">//发送数据</span><br><span class="hljs-built_in">sendto</span>(serverSocket, buffer, size, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;clientAddress, <span class="hljs-built_in">sizeof</span>(clientAddress));<br><br><span class="hljs-built_in">close</span>(serverSocket); <span class="hljs-comment">//关闭套接字</span><br></code></pre></td></tr></table></figure><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span> clientSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//创建套接字</span><br><br><span class="hljs-comment">//发送数据</span><br><span class="hljs-built_in">sendto</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress, <span class="hljs-built_in">sizeof</span>(serverAddress)); <br><br><span class="hljs-comment">//接收数据</span><br><span class="hljs-built_in">recvfrom</span>(clientSocket, buffer, size, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress,<span class="hljs-built_in">sizeof</span>(serverAddress));<br><br><span class="hljs-built_in">close</span>(clientSocket); <span class="hljs-comment">//关闭套接字</span><br></code></pre></td></tr></table></figure><h5 id="常用函数的原型和参数用法详解："><a href="#常用函数的原型和参数用法详解：" class="headerlink" title="常用函数的原型和参数用法详解："></a>常用函数的原型和参数用法详解：</h5><p><strong>socket()函数：</strong><br>原型：int socket(int domain, int type, int protocol);<br>参数：<br>domain：地址族，通常为AF_INET（IPv4）或AF_INET6（IPv6）。<br>type：套接字类型，可以是SOCK_STREAM（TCP）或SOCK_DGRAM（UDP）。<br>protocol：协议，通常为0，表示自动选择合适的协议。</p><p> <strong>bind()函数</strong>：</p><p>原型：int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);<br>参数：<br>sockfd：套接字描述符。<br>addr：指向本地地址结构体的指针。<br>addrlen：地址结构体的长度。</p><p><strong>listen()函数</strong>：</p><p>原型：int listen(int sockfd, int backlog);<br>参数：<br>sockfd：套接字描述符。<br>backlog：待连接队列的最大长度。</p><p><strong>accept()函数</strong>：</p><p>原型：int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);<br>参数：<br>sockfd：套接字描述符。<br>addr：指向客户端地址结构体的指针，用于存储客户端的地址信息。<br>addrlen：指向地址结构体长度的指针。</p><p><strong>connect()函数</strong>：</p><p>原型：int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);<br>参数：<br>sockfd：套接字描述符。<br>addr：指向目标地址结构体的指针。<br>addrlen：地址结构体的长度。</p><p><strong>send()函数</strong>：</p><p>原型：ssize_t send(int sockfd, const void *buf, size_t len, int flags);<br>参数：<br>sockfd：套接字描述符。<br>buf：指向要发送数据的缓冲区的指针。<br>len：要发送的数据的长度。<br>flags：发送标志，通常为0。</p><p><strong>recv()函数</strong>：</p><p>原型：ssize_t recv(int sockfd, void *buf, size_t len, int flags);<br>参数：<br>sockfd：套接字描述符。<br>buf：指向接收数据的缓冲区的指针。<br>len：要接收的数据的最大长度。<br>flags：接收标志，通常为0。</p><p><strong>sendto()函数</strong>：</p><p>原型：ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen);<br>参数：<br>sockfd：套接字描述符。<br>buf：指向要发送数据的缓冲区的指针。<br>len：要发送的数据的长度。<br>flags：发送标志，通常为0。<br>dest_addr：指向目标地址结构体的指针。<br>addrlen：目标地址结构体的长度。</p><p><strong>recvfrom()函数</strong>：</p><p>原型：ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);<br>参数：<br>sockfd：套接字描述符。<br>buf：指向接收数据的缓冲区的指针。<br>len：要接收的数据的最大长度。<br>flags：接收标志，通常为0。<br>src_addr：指向源地址结构体的指针，用于存储源地址信息。<br>addrlen：指向地址结构体长度的指针。</p><p><strong>close()函数</strong>：<br>原型：int close(int sockfd);</p><p>参数：套接字描述符。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h3><h4 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/socket.h&gt;</span><br><span class="hljs-comment">#include &lt;arpa/inet.h&gt;</span><br><br><span class="hljs-comment">#define SERVER_IP &quot;127.0.0.1&quot;</span><br><span class="hljs-comment">#define SERVER_PORT 8080</span><br><span class="hljs-comment">#define BUFFER_SIZE 1024</span><br><br>int main() &#123;<br>    int serverSocket, clientSocket;<br>    struct sockaddr_in serverAddr, clientAddr;<br>    socklen_t clientAddrLen;<br>    char buffer[BUFFER_SIZE];<br><br>    <span class="hljs-regexp">//</span> 创建服务端套接字<br>    serverSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (serverSocket == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create socket&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 设置服务器地址信息<br>    memset(&amp;serverAddr, <span class="hljs-number">0</span>, sizeof(serverAddr));<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = htons(SERVER_PORT);<br>    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);<br><br>    <span class="hljs-regexp">//</span> 绑定套接字到指定地址和端口<br>    <span class="hljs-keyword">if</span> (bind(serverSocket, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr)) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to bind socket&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 监听连接请求<br>    <span class="hljs-keyword">if</span> (listen(serverSocket, <span class="hljs-number">5</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to listen&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Server listening on port %d...\n&quot;</span>, SERVER_PORT);<br><br>    <span class="hljs-regexp">//</span> 接受客户端连接<br>    clientAddrLen = sizeof(clientAddr);<br>    clientSocket = accept(serverSocket, (struct sockaddr *)&amp;clientAddr, &amp;clientAddrLen);<br>    <span class="hljs-keyword">if</span> (clientSocket == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to accept client connection&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Client connected: %s\n&quot;</span>, inet_ntoa(clientAddr.sin_addr));<br><br>    <span class="hljs-regexp">//</span> 接收数据<br>    memset(buffer, <span class="hljs-number">0</span>, sizeof(buffer));<br>    <span class="hljs-keyword">if</span> (recv(clientSocket, buffer, BUFFER_SIZE, <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to receive data&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Client message: %s\n&quot;</span>, buffer);<br><br>    <span class="hljs-regexp">//</span> 发送响应<br>    strcpy(buffer, <span class="hljs-string">&quot;Hello, Client!&quot;</span>);<br>    <span class="hljs-keyword">if</span> (send(clientSocket, buffer, strlen(buffer), <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to send data&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 关闭套接字<br>    close(clientSocket);<br>    close(serverSocket);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/socket.h&gt;</span><br><span class="hljs-comment">#include &lt;arpa/inet.h&gt;</span><br><br><span class="hljs-comment">#define SERVER_IP &quot;127.0.0.1&quot;</span><br><span class="hljs-comment">#define SERVER_PORT 8080</span><br><span class="hljs-comment">#define BUFFER_SIZE 1024</span><br><br>int main() &#123;<br>    int clientSocket;<br>    struct sockaddr_in serverAddr;<br>    char buffer[BUFFER_SIZE];<br><br>    <span class="hljs-regexp">//</span> 创建客户端套接字<br>    clientSocket = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientSocket == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create socket&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 设置服务器地址信息<br>    memset(&amp;serverAddr, <span class="hljs-number">0</span>, sizeof(serverAddr));<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = htons(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (inet_pton(AF_INET, SERVER_IP, &amp;(serverAddr.sin_addr)) &lt;=<br><br> <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to set server IP&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 连接到服务器<br>    <span class="hljs-keyword">if</span> (connect(clientSocket, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr)) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to connect to server&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Connected to server %s:%d\n&quot;</span>, SERVER_IP, SERVER_PORT);<br><br>    <span class="hljs-regexp">//</span> 发送数据<br>    strcpy(buffer, <span class="hljs-string">&quot;Hello, Server!&quot;</span>);<br>    <span class="hljs-keyword">if</span> (send(clientSocket, buffer, strlen(buffer), <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to send data&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> 接收响应<br>    memset(buffer, <span class="hljs-number">0</span>, sizeof(buffer));<br>    <span class="hljs-keyword">if</span> (recv(clientSocket, buffer, BUFFER_SIZE, <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to receive data&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    printf(<span class="hljs-string">&quot;Server response: %s\n&quot;</span>, buffer);<br><br>    <span class="hljs-regexp">//</span> 关闭套接字<br>    close(clientSocket);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h3><h4 id="服务器：-1"><a href="#服务器：-1" class="headerlink" title="服务器："></a>服务器：</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_IP <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT 8080</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFER_SIZE 1024</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> serverSocket;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddr, clientAddr;<br>    <span class="hljs-type">socklen_t</span> clientAddrLen;<br>    <span class="hljs-type">char</span> buffer[BUFFER_SIZE];<br><br>    <span class="hljs-comment">// 创建服务端套接字</span><br>    serverSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (serverSocket == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to create socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 设置服务器地址信息</span><br>    <span class="hljs-built_in">memset</span>(&amp;serverAddr, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(serverAddr));<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    serverAddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br><br>    <span class="hljs-comment">// 绑定套接字到指定地址和端口</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(serverSocket, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serverAddr, <span class="hljs-built_in">sizeof</span>(serverAddr)) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to bind socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server listening on port %d...\n&quot;</span>, SERVER_PORT);<br><br>    <span class="hljs-comment">// 接收数据</span><br>    clientAddrLen = <span class="hljs-built_in">sizeof</span>(clientAddr);<br>    <span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buffer));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recvfrom</span>(serverSocket, buffer, BUFFER_SIZE, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;clientAddr, &amp;clientAddrLen) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to receive data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Client message: %s\n&quot;</span>, buffer);<br><br>    <span class="hljs-comment">// 发送响应</span><br>    <span class="hljs-built_in">strcpy</span>(buffer, <span class="hljs-string">&quot;Hello, Client!&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sendto</span>(serverSocket, buffer, <span class="hljs-built_in">strlen</span>(buffer), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;clientAddr, clientAddrLen) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to send data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭套接字</span><br>    <span class="hljs-built_in">close</span>(serverSocket);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户机："><a href="#客户机：" class="headerlink" title="客户机："></a>客户机：</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_IP <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT 8080</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFER_SIZE 1024</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> clientSocket;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddr;<br>    <span class="hljs-type">char</span> buffer[BUFFER_SIZE];<br><br>    <span class="hljs-comment">// 创建客户端套接字</span><br><br><br>    clientSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientSocket == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to create socket&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 设置服务器地址信息</span><br>    <span class="hljs-built_in">memset</span>(&amp;serverAddr, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(serverAddr));<br>    serverAddr.sin_family = AF_INET;<br>    serverAddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">inet_pton</span>(AF_INET, SERVER_IP, &amp;(serverAddr.sin_addr)) &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to set server IP&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Connected to server %s:%d\n&quot;</span>, SERVER_IP, SERVER_PORT);<br><br>    <span class="hljs-comment">// 发送数据</span><br>    <span class="hljs-built_in">strcpy</span>(buffer, <span class="hljs-string">&quot;Hello, Server!&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sendto</span>(clientSocket, buffer, <span class="hljs-built_in">strlen</span>(buffer), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serverAddr, <span class="hljs-built_in">sizeof</span>(serverAddr)) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to send data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">// 接收响应</span><br>    <span class="hljs-built_in">memset</span>(buffer, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buffer));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recvfrom</span>(clientSocket, buffer, BUFFER_SIZE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;Failed to receive data&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server response: %s\n&quot;</span>, buffer);<br><br>    <span class="hljs-comment">// 关闭套接字</span><br>    <span class="hljs-built_in">close</span>(clientSocket);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h2><p><strong>TCP建立连接的三次握手</strong>，在发送数据的准备阶段，客户机与服务器的三次交互，以保证连接可靠<br><strong>第一次握手</strong>：客户端发送一个带有SYN标志的TCP报文段给服务器，请求建立连接。​<br>客户端发送SYN报文：​客户端发送一个SYN&#x3D;1的报文段，序列号设为X。​客户端进入SYN_SENT状态。<br><strong>第二次握手</strong>：服务器收到客户端的SYN报文段后，返回一个带有SYN和ACK标志的TCP报文段给客户端，表示同意建立连接。​<br>服务器发送SYN+ACK报文：​服务器收到SYN报文后，发送一个SYN&#x3D;1、ACK&#x3D;1的报文段，序列号设为Y，确认号设为X+1。​服务器进入SYN_RECEIVED状态。<br><strong>第三次握手</strong>：客户端收到服务器的SYN+ACK报文段后，再发送一个带有ACK标志的TCP报文段给服务器，确认连接建立。​<br>客户端发送ACK报文：客户端收到SYN+ACK报文后，发送一个ACK&#x3D;1的报文段，确认号设为Y+1，序列号设为X+1。此时，双方都进入了ESTABLISHED状态，连接建立完成。</p><p><strong>TCP断开连接的四次挥手</strong><br><strong>第一次挥手</strong>：客户端发送一个带有FIN标志的TCP报文段给服务器，请求关闭连接。​主动关闭的一方发送一个FIN标志置位的报文段给另一方，并进入FIN_WAIT_1状态。​这表示主动关闭方完成了数据发送，并希望关闭该方向的数据传输通道。​<br><strong>第二次挥手</strong>：服务器收到客户端的FIN报文段后，返回一个带有ACK标志的TCP报文段给客户端，表示已确认收到关闭连接的请求。​被动关闭的一方接收到FIN报文后，发送一个ACK报文作为回应，并进入CLOSE_WAIT状态。​这表示被动关闭方确认了主动关闭方的FIN报文，并准备好关闭该方向的数据传输通道。​<br><strong>第三次挥手</strong>：服务器在确认所有数据传输完毕后，发送一个带有FIN标志的TCP报文段给客户端，请求关闭服务器到客户端的连接。​被动关闭的一方在完成自己的数据发送后也会发送一个FIN报文给主动关闭的一方，并进入LAST_ACK状态。​这表示被动关闭方完成了数据发送，并希望关闭相反方向的数据传输通道。​<br><strong>第四次挥手</strong>：客户端收到服务器的FIN报文段后，返回一个带有ACK标志的TCP报文段给服务器，确认连接已完全关闭。主动关闭的一方接收到对方的FIN报文后，发送一个ACK作为回应，并进入TIME_WAIT状态。这表示主动关闭方确认了被动关闭方的FIN报文，并准备好关闭相反方向的数据传输通道。</p><ul><li><p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p></li><li><p>在TCP编程中，你通常需要创建一个服务器和一个客户端。</p></li><li><p>服务器会监听一个特定的端口，等待客户端的连接。</p></li><li><p>客户端会尝试连接到服务器，一旦连接建立，双方就可以通过套接字发送和接收数据。</p></li><li><p>UDP是一种无连接的、不可靠的、基于数据报的传输层通信协议。</p></li><li><p>与TCP不同，UDP不保证数据的顺序或完整性，但它通常具有更低的延迟。</p></li><li><p>UDP编程也涉及服务器和客户端的创建，但不需要建立持久的连接。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
      <category>Socket编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言 Socket 计算机网络 进程间通信 tcp/ip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenWrt</title>
    <link href="/2024/08/28/OpenWrt/"/>
    <url>/2024/08/28/OpenWrt/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenWrt路由器"><a href="#OpenWrt路由器" class="headerlink" title="OpenWrt路由器"></a>OpenWrt路由器</h1><p>OpenWrt 项目是一个针对嵌入式设备的 Linux 操作系统，提供了具有软件包管理功能的完全可写的文件系统通过使用适配任何应用的软件包来定制设备。</p><h5 id="文件系统布局"><a href="#文件系统布局" class="headerlink" title="文件系统布局"></a>文件系统布局</h5><p><img src="/img/291.png" alt="图片"> </p><p>&#x2F;etc: 这个目录包含了大部分的配置文件。具体配置文件包括：<br>&#x2F;etc&#x2F;config&#x2F;：包含主要的配置文件，例如网络配置 (network)、无线设置 (wireless)、防火墙设置 (firewall) 等。</p><p>&#x2F;etc&#x2F;config&#x2F;network: 配置网络接口和网络设置。可以在这里设置静态 IP、DHCP 客户端、桥接等。<br>&#x2F;etc&#x2F;config&#x2F;wireless: 配置无线网络接口，包括 SSID、加密类型、无线模式等。<br>&#x2F;etc&#x2F;config&#x2F;firewall: 配置防火墙规则，包括 NAT 和过滤规则。<br>&#x2F;etc&#x2F;config&#x2F;system: 系统设置，包括主机名、时区和其他系统级别的配置。<br>&#x2F;etc&#x2F;config&#x2F;dhcp: 配置 DHCP 服务器和 DHCP 选项。</p><p>&#x2F;etc&#x2F;init.d&#x2F;：包含系统服务的启动脚本，可以用来启动、停止和重启服务。</p><p>&#x2F;lib: 包含了系统库和脚本</p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight plaintext"><figcaption><span>wifi所有的配置文件  qcawificfg80211.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs lib/wifi/">/etc/config 配置文件<br><br>vi /ect/config/wireless<br><br>/etc/config/dhcp    //网络服务配置<br><br>/etc/config/network   //网络接口配置<br><br>/etc/config/firewall    //防火墙配置<br><br>cat /etc/config/network  //查看配置<br><br>uci show network  //uci配置查看命令<br><br>uci set network.lan.proto=dhcp  //配置动态获取<br><br>uci set network.lan.proto=&#x27;static&#x27;  //配置静态IP<br><br>uci set network.lan.ipaddr=&#x27;192.168.10.100&#x27;  //设置LAN口的IP地址<br><br>uci set network.lan.netmask=&#x27;255.255.255.0&#x27; //设置LAN口的子网掩码<br><br>uci set network.lan.gateway=&#x27;192.168.10.1&#x27;  //设置LAN口的网关地址<br><br>uci set network.lan.dns=&#x27;8.8.8.8&#x27; //设置DNS服务器地址<br><br>uci set network.lan.dns=&#x27;8.8.8.8 8.8.4.4&#x27;   //多个DNS服务器<br><br>uci commit network  //保存修改后的配置<br><br>/etc/init.d/network restart  //重启网络<br><br>brctl show  //查看桥<br><br>hotplug热插拔<br><br>/etc/hotplug.d/button<br><br>vim 51-wps-reset   //长按wps键输出“自定义语句”，松开后重启<br><br>ubus list  显示所有的注册的服务<br><br>ubus -v list 显示更详细的信息<br><br>ubus -v list network.device：显示某个服务注册的功能<br><br>ps |grep lighttp<br><br>vi /etc/lighttpd/lighttpd.conf<br><br>ps |grep uhttp<br><br>/etc/init.d/lighttpd restart<br><br>/etc/init.d/uhttpd restart<br><br>ethtool eth0 //查看接口的工作协议（全双工、半双工） <br><br></code></pre></td></tr></table></figure><h5 id="创建和维护自定义-OpenWrt-软件包，编写-Makefile-和配置文件"><a href="#创建和维护自定义-OpenWrt-软件包，编写-Makefile-和配置文件" class="headerlink" title="创建和维护自定义 OpenWrt 软件包，编写 Makefile 和配置文件"></a>创建和维护自定义 OpenWrt 软件包，编写 Makefile 和配置文件</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mkdir package/helloworld<br><span class="hljs-keyword">cd</span> package/helloworld/<br>mkdir src<br><span class="hljs-keyword">cd</span> src/<br>vim helloworld.c  <span class="hljs-string">//</span>编写C程序<br>vim makefile  <span class="hljs-string">//</span>编写编译指令，将C源程序编译为可执行文件<br><span class="hljs-keyword">cd</span> <span class="hljs-string">../</span><br>vim Makefile  <span class="hljs-string">//</span>编写主Makefile，编译和安装软件包<br>make menuconfig  <span class="hljs-string">//</span>选择软件包helloworld 并标记为编译<br>make <span class="hljs-string">./package/helloworld/</span>&#123;clean,prepare,compile&#125; V=s  <span class="hljs-string">//</span>编译软件包<br>bin/ipq/<span class="hljs-string">./packages/base/helloworld_1.0-1_ipq.ipk</span>   <span class="hljs-string">//</span>打包成<span class="hljs-string">.ipk</span>文件并安装到OpenWrt系统<br><br>在板子上: <br><span class="hljs-keyword">cd</span> <span class="hljs-string">/tmp/</span><br>tftp -g -r helloworld_1.0-1_ipq.ipk x.x.x.x   <span class="hljs-string">//tftp</span>传输<br>opkg install helloworld_1.0-1_ipq.ipk  <span class="hljs-string">//</span>通过opkg安装<br>helloworld  <span class="hljs-string">//</span>运行程序<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>OpenWrt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>网络项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/27/hello-world/"/>
    <url>/2024/08/27/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
